
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.build.ReactBuildConfig;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativeBlobUtilsSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "ReactNativeBlobUtil";

  public NativeBlobUtilsSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected abstract Map<String, Object> getTypedExportedConstants();

  @Override
  @DoNotStrip
  public final @Nullable Map<String, Object> getConstants() {
    Map<String, Object> constants = getTypedExportedConstants();
    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
      Set<String> obligatoryFlowConstants = new HashSet<>(Arrays.asList(
          "ApplicationSupportDir",
          "CacheDir",
          "DCIMDir",
          "DocumentDir",
          "DownloadDir",
          "LegacyDCIMDir",
          "LegacyDownloadDir",
          "LegacyMovieDir",
          "LegacyMusicDir",
          "LegacyPictureDir",
          "LegacyRingtoneDir",
          "LegacySDCardDir",
          "LibraryDir",
          "MainBundleDir",
          "MovieDir",
          "MusicDir",
          "PictureDir",
          "RingtoneDir",
          "SDCardApplicationDir",
          "SDCardDir"
      ));
      Set<String> optionalFlowConstants = new HashSet<>();
      Set<String> undeclaredConstants = new HashSet<>(constants.keySet());
      undeclaredConstants.removeAll(obligatoryFlowConstants);
      undeclaredConstants.removeAll(optionalFlowConstants);
      if (!undeclaredConstants.isEmpty()) {
        throw new IllegalStateException(String.format("Native Module Flow doesn't declare constants: %s", undeclaredConstants));
      }
      undeclaredConstants = obligatoryFlowConstants;
      undeclaredConstants.removeAll(constants.keySet());
      if (!undeclaredConstants.isEmpty()) {
        throw new IllegalStateException(String.format("Native Module doesn't fill in constants: %s", undeclaredConstants));
      }
    }
    return constants;
  }

  @ReactMethod
  @DoNotStrip
  public abstract void fetchBlobForm(ReadableMap options, String taskId, String method, String url, ReadableMap headers, ReadableArray form, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchBlob(ReadableMap options, String taskId, String method, String url, ReadableMap headers, String body, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void createFile(String path, String data, String encoding, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void createFileASCII(String path, ReadableArray data, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void pathForAppGroup(String groupName, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract String syncPathAppGroup(String groupName);

  @ReactMethod
  @DoNotStrip
  public abstract void exists(String path, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void writeFile(String path, String encoding, String data, boolean transformFile, boolean append, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void writeFileArray(String path, ReadableArray data, boolean append, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void writeStream(String path, String withEncoding, boolean appendData, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void writeArrayChunk(String streamId, ReadableArray withArray, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void writeChunk(String streamId, String withData, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void closeStream(String streamId, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void unlink(String path, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void removeSession(ReadableArray paths, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void ls(String path, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void stat(String target, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void lstat(String path, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void cp(String src, String dest, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void mv(String path, String dest, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void mkdir(String path, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void readFile(String path, String encoding, boolean transformFile, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void hash(String path, String algorithm, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void readStream(String path, String encoding, double bufferSize, double tick, String streamId);

  @ReactMethod
  @DoNotStrip
  public abstract void getEnvironmentDirs(Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void cancelRequest(String taskId, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void enableProgressReport(String taskId, double interval, double count);

  @ReactMethod
  @DoNotStrip
  public abstract void enableUploadProgressReport(String taskId, double interval, double count);

  @ReactMethod
  @DoNotStrip
  public abstract void slice(String src, String dest, double start, double end, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void presentOptionsMenu(String uri, String scheme, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void presentOpenInMenu(String uri, String scheme, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void presentPreview(String uri, String scheme, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void excludeFromBackupKey(String url, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void df(Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void emitExpiredEvent(Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void actionViewIntent(String path, String mime, String chooserTitle, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addCompleteDownload(ReadableMap config, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void copyToInternal(String contentUri, String destpath, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void copyToMediaStore(ReadableMap filedata, String mt, String path, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void createMediaFile(ReadableMap filedata, String mt, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getBlob(String contentUri, String encoding, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getContentIntent(String mime, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getSDCardDir(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getSDCardApplicationDir(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void scanFile(ReadableArray pairs, Callback callback);

  @ReactMethod
  @DoNotStrip
  public abstract void writeToMediaFile(String fileUri, String path, boolean transformFile, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addListener(String eventName);

  @ReactMethod
  @DoNotStrip
  public abstract void removeListeners(double count);
}
